@client.command("Scheduling Commands", ["remind", "?", "..."], "remind <user> <query...> to <task...>", "remind a user to perform a task at a specified time")
async def command_remind(command, message):
  member = await get_member(message.guild, command[2], message.author)
  if "to" not in command[3:]:
    raise BotError("You must specify a task to create a reminder! (Use syntax `remind <user> <date query> to <task>`)")
  query = command[3:command.index("to")]
  if query == []:
    raise BotError("You must specify a date to create a reminder! (Use syntax `remind <user> <date query> to <task>`)")
  task = " ".join(command[command.index("to") + 1:])
  if query[0] == "in":
    number = None
    colontime = None
    total = {
      "second": None,
      "minute": None,
      "hour": None,
      "day": None,
      "week": None,
      "month": None,
      "year": None
    }
    for token in query[1:]:
      token = token.replace(",", "")
      if re.match(r"^\-?(\d*\.)?\d+$", token):
        if number is None:
          number = float(token)
        else:
          raise BotError("Numbers/a(n) need to be followed with a unit!")
      elif token in ["a", "an"]:
        if number is None:
          number = 1
        else:
          raise BotError("Numbers/a(n) need to be followed with a unit!")
      elif token in ["second", "seconds", "minute", "minutes", "hour", "hours", "day", "days", "week", "weeks", "month", "months", "year", "years"]:
        if number is None:
          raise BotError("Units need to be followed with a number!")
        else:
          if token.endswith("s"):
            token = token[:-1]
          if total[token] is None:
            total[token] = number
            number = None
          else:
            raise BotError(f"Specified `{token}` multiple times!")
      elif re.match(r"^\-?\d+:\d+$", token):
        if total["hour"] or total["minute"] is not None:
          raise BotError(f"Specified hour/minute multiple times!")
        else:
          if token[0] == "-":
            mul = -1
            token = token[1:]
          else:
            mul = 1
          total["hour"], total["minute"] = [int(x) * mul for x in token.split(":")]
      elif re.match(r"^\-?\d+:\d+:\d+$", token):
        if total["hour"] or total["minute"] or total["second"] is not None:
          raise BotError(f"Specified hour/minute/second multiple times!")
        else:
          if token[0] == "-":
            mul = -1
            token = token[1:]
          else:
            mul = 1
          total["hour"], total["minute"], total["second"] = [int(x) * mul for x in token.split(":")]
      elif token == "and":
        pass
      else:
        try:
          n = w2n.word_to_num(token)
          if number is None:
            number = n
          else:
            raise BotError("Numbers/a(n) need to be followed with a unit!")
        except ValueError:
          raise BotError(f"Not sure what to do with this token: `{token}`!")
    for key in total:
      total[key] = total[key] or 0
    
    total["day"] += 365 * (total["year"] % 1)
    total["year"] = int(total["year"])
    
    total["day"] += 30 * (total["month"] % 1)
    total["month"] = int(total["month"])
    
    total["day"] += 7 * (total["week"] % 1)
    total["week"] = int(total["week"])
    
    total["second"] += 86400 * (total["day"] % 1)
    total["day"] = int(total["day"])
    
    total["second"] += 3600 * (total["hour"] % 1)
    total["hour"] = int(total["hour"])
    
    total["second"] += 60 * (total["minute"] % 1)
    total["minute"] = int(total["minute"])
    
    total["second"] = int(total["second"])
    
    now = datetime.datetime.now()
    
    second = now.second + total["second"]
    while second < 0:
      second += 60
      total["minute"] -= 1
    while second >= 60:
      second -= 60
      total["minute"] += 1
    
    minute = now.minute + total["minute"]
    while minute < 0:
      minute += 60
      total["hour"] -= 1
    while minute >= 60:
      minute -= 60
      total["hour"] += 1
    
    hour = now.hour + total["hour"]
    while hour < 0:
      hour += 24
      total["day"] -= 1
    while hour >= 24:
      hour -= 24
      total["day"] += 1
    
    year = now.year + total["year"]
    
    month = now.month + total["month"]
    while month <= 0:
      month += 12
      year -= 1
    while month > 12:
      month -= 12
      year += 1
    
    day = now.day + total["day"] + total["week"] * 7
    while day <= 0:
      month -= 1
      if month == 0:
        month = 12
        year -= 1
      day += month_days(year, month)
    while day > month_days(year, month):
      day -= month_days(year, month)
      month += 1
      if month == 13:
        month = 1
        year += 1
    
    ident = datetime.datetime(year, month, day, hour, minute, second)
  else:
    await send(message, "NotImplemented")
    return
  if ident <= datetime.datetime.now():
    raise BotError("I cannot remind you in the past. Make sure you remember to complete your tasks before they are due next time!")
  else:
    await send(message, f"I will remind {member.name}#{member.discriminator} to '{task}' {ident.strftime('at %-I:%M:%S %p on %A, %B %-d, %Y')}!")
    await mod_data("reminders", lambda x: x | {(ident.timestamp(), task, message.channel)}, default = set())

def month_days(year, month):
  if month in [1, 3, 5, 7, 8, 10, 12]:
    return 31
  elif month == 2:
    return 28 + (year % 400 == 0 or year % 4 == 0 and year % 100 != 0)
  else:
    return 30